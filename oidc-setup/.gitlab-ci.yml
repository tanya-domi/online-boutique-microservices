stages:
  - init
  - validate
  - plan
  - apply
  - destroy

image:
  name: oluwaseuna/aws-k8s-terraform:latest
  entrypoint: [""]

variables:
  TF_VAR_AWS_ACCESS_KEY_ID: "$AWS_ACCESS_KEY_ID"
  TF_VAR_AWS_SECRET_ACCESS_KEY: "$AWS_SECRET_ACCESS_KEY"
  TF_STATE_NAME: "gitlab-oidc"
  TF_ROOT: "${CI_PROJECT_DIR}"
  TF_ADDRESS: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${TF_STATE_NAME}"
  TF_HTTP_LOCK_METHOD: POST
  TF_HTTP_UNLOCK_METHOD: DELETE
  TF_HTTP_USERNAME: gitlab-ci-token
  TF_HTTP_PASSWORD: ${CI_JOB_TOKEN}

# .default_setup: &token
#   before_script:
#    # Get Web Identity Token
#     - >
#       export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s"
#       $(aws sts assume-role-with-web-identity
#       --role-arn ${ROLE_ARN}
#       --role-session-name "GitLabRunner-${CI_PROJECT_ID}-${CI_PIPELINE_ID}"
#       --web-identity-token ${GITLAB_OIDC_TOKEN}
#       --duration-seconds 3600
#       --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]'
#       --output text))
#     - aws sts get-caller-identity

init:
  # <<: *token
  # id_tokens:
  #   GITLAB_OIDC_TOKEN:
  #     aud: https://gitlab.com
  stage: init
  tags:
    - aws
    - docker
  script:
    - >
      terraform init
      -backend-config="address=${TF_ADDRESS}"
      -backend-config="lock_address=${TF_ADDRESS}/lock"
      -backend-config="unlock_address=${TF_ADDRESS}/lock"
  artifacts:
    paths:
      - .terraform/
      - .terraform.lock.hcl

validate:
  # <<: *token
  # id_tokens:
  #   GITLAB_OIDC_TOKEN:
  #     aud: https://gitlab.com
  stage: validate
  tags:
    - aws
    - docker
  script:
    - terraform fmt -recursive
    - terraform fmt -check -recursive
    - terraform validate

plan:
  # <<: *token
  # id_tokens:
  #   GITLAB_OIDC_TOKEN:
  #     aud: https://gitlab.com
  stage: plan
  tags:
    - aws
    - docker
  script:
    - terraform plan -out "tfplanfile"
  artifacts:
    paths:
      - tfplanfile

apply:
  # <<: *token
  # id_tokens:
  #   GITLAB_OIDC_TOKEN:
  #     aud: https://gitlab.com
  stage: apply
  tags:
    - aws
    - docker
  script:
    - terraform apply -input=false "tfplanfile"
    - terraform output > output.json
  artifacts:
    paths:
      - output.json
  when: manual

destroy:
  # <<: *token
  # id_tokens:
  #   GITLAB_OIDC_TOKEN:
  #     aud: https://gitlab.com
  stage: destroy
  tags:
    - aws
    - docker
  script:
    - terraform destroy --auto-approve
  when: manual