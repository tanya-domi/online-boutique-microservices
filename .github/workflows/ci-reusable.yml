name: Reusable CI Workflow

on:
  workflow_call:
    inputs:
      service_name:
        required: true
        type: string
      dockerfile_path:
        required: true
        type: string
      build_context:
        required: true
        type: string
      image_name:
        required: true
        type: string
      language:
        required: true
        type: string
    secrets:
      REGISTRY_USERNAME:
        required: true
      REGISTRY_PASSWORD:
        required: true
      # SONAR_HOST_URL:
      #   required: true
      # SONAR_TOKEN:
      #   required: true

jobs:
  build-test-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Java example (you can keep the others if needed)
      - name: Setup Java
        if: ${{ inputs.language == 'java' }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Cache Gradle
        if: ${{ inputs.language == 'java' }}
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles(format('{0}/gradle-wrapper.properties', inputs.build_context)) }}

      - name: Grant execute permission for Gradle wrapper
        if: ${{ inputs.language == 'java' }}
        run: chmod +x ${{ inputs.build_context }}/gradlew

      # - name: Run Gradle tests
      #   if: ${{ inputs.language == 'java' }}
      #   run: |
      #     cd ${{ inputs.build_context }}
      #     ./gradlew test
      #     mkdir -p ../artifacts/${{ inputs.service_name }}
      #     cp -r build/test-results ../artifacts/${{ inputs.service_name }}/ || true

      - name: Build Java service (skip tests)
        if: ${{ inputs.language == 'java' }}
        run: |
           cd ${{ inputs.build_context }}
           ./gradlew clean build -x test

      # ============ SonarQube ============

      # - name: SonarQube Scan
      #   uses: SonarSource/sonarqube-scan-action@v3
      #   with:
      #     projectBaseDir: ${{ inputs.build_context }}
      #     args: >
      #       -Dsonar.projectKey=${{ inputs.service_name }}
      #       -Dsonar.projectName=${{ inputs.service_name }}
      #       -Dsonar.sources=.
      #   env:
      #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # ============ Upload Artifacts ============

      - name: Upload built artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.service_name }}-jar
          path: ${{ inputs.build_context }}/build/libs
          retention-days: 7

      # ============ Docker Build & Push ============

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.build_context }}
          file: ${{ inputs.dockerfile_path }}
          push: true
          tags: |
            ${{ inputs.image_name }}:latest
            ${{ inputs.image_name }}:${{ github.sha }}


##################################
















