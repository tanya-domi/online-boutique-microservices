name: Reusable CI Workflow

on:
  workflow_call:
    inputs:
      service_name:
        required: true
        type: string
      dockerfile_path:
        required: true
        type: string
      build_context:
        required: true
        type: string
      image_name:
        required: true
        type: string
      language:
        required: true
        type: string
      tag:
        required: true
        type: string
    secrets:
      REGISTRY_USERNAME:
        required: true
      REGISTRY_PASSWORD:
        required: true
      # SONAR_HOST_URL:
      #   required: true
      # SONAR_TOKEN:
      #   required: true

jobs:
  build-test-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

       # Java(Gradle)
      - name: Setup Java
        if: ${{ inputs.language == 'java' }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Cache Gradle
        if: ${{ inputs.language == 'java' }}
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles(format('{0}/gradle-wrapper.properties', inputs.build_context)) }}

      - name: Grant execute permission for Gradle wrapper
        if: ${{ inputs.language == 'java' }}
        run: chmod +x ${{ inputs.build_context }}/gradlew

      - name: Build Java service (skip tests)
        if: ${{ inputs.language == 'java' }}
        run: |
           cd ${{ inputs.build_context }}
           ./gradlew clean build -x test

      # - name: SonarQube Scan
      #   uses: SonarSource/sonarqube-scan-action@v3
      #   with:
      #     projectBaseDir: ${{ inputs.build_context }}
      #     args: >
      #       -Dsonar.projectKey=${{ inputs.service_name }}
      #       -Dsonar.projectName=${{ inputs.service_name }}
      #       -Dsonar.sources=.
      #   env:
      #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

     
      - name: Upload built artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.service_name }}-jar
          path: ${{ inputs.build_context }}/build/libs
          retention-days: 7

          #.NET
      - name: Setup .NET
        if: ${{ inputs.language == 'dotnet' }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Cache NuGet packages
        if: ${{ inputs.language == 'dotnet' }}
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles(format('{0}/**/*.csproj', inputs.build_context)) }}

      - name: Restore and Build .NET project
        if: ${{ inputs.language == 'dotnet' }}
        run: |
          cd ${{ inputs.build_context }}
          dotnet restore
          dotnet build --no-restore --configuration Release

      - name: Install trx2junit Tool
        if: ${{ inputs.language == 'dotnet' }}
        run: |
          dotnet tool install --global trx2junit
          echo "/root/.dotnet/tools" >> $GITHUB_PATH

      - name: Run .NET Tests
        if: ${{ inputs.language == 'dotnet' }}
        run: |
          cd ${{ inputs.build_context }}
          mkdir -p TestResults
          dotnet test --configuration Release --logger "trx;LogFileName=test-results.trx" --results-directory ./TestResults

      - name: Convert TRX to JUnit XML
        if: ${{ inputs.language == 'dotnet' }}
        run: |
          cd ${{ inputs.build_context }}
          if compgen -G "./TestResults/*.trx" > /dev/null; then
            trx2junit ./TestResults/*.trx
          else
            echo "No .trx files found in ./TestResults, skipping conversion."
          fi

      - name: Upload Test Results
        if: ${{ inputs.language == 'dotnet' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.service_name }}-test-results
          path: |
            ${{ inputs.build_context }}/TestResults/*.xml
            ${{ inputs.build_context }}/TestResults/*.trx
          retention-days: 7


     # Setup Node.js environment
      - name: Setup Node.js and .npmrc
        if: ${{ inputs.language == 'node' }}
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://npm.pkg.github.com/'
          scope: '@octocat'

      - name: Cache npm
        if: ${{ inputs.language == 'node' }}
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles(format('{0}/package-lock.json', inputs.build_context)) }}

      - name: Install Dependencies
        if: ${{ inputs.language == 'node' }}
        run: |
          cd ${{ inputs.build_context }}
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - name: Run Node.js tests
        if: ${{ inputs.language == 'node' }}
        run: |
          cd ${{ inputs.build_context }}
          npm test -- --coverage || echo "No tests found"
          mkdir -p ../artifacts/${{ inputs.service_name }}
          cp -r coverage ../artifacts/${{ inputs.service_name }}/ || true


      # --- Python ---
      - name: Setup Python
        if: ${{ inputs.language == 'python' }}
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Cache pip
        if: ${{ inputs.language == 'python' }}
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('${{ inputs.build_context }}/requirements.txt') }}
      - name: Run Python tests
        if: ${{ inputs.language == 'python' }}
        run: |
          cd ${{ inputs.build_context }}
          pip install -r requirements.txt || true
          pytest --cov=. || echo "No tests found"
          mkdir -p ../artifacts/${{ inputs.service_name }}
          cp -r .coverage ../artifacts/${{ inputs.service_name }}/ || true

      # - name: Publish to PyPI
      #   if: ${{ inputs.language == 'python' && inputs.is_library == 'true' }}
      #   run: |
      #     cd ${{ inputs.build_context }}
      #     python setup.py sdist bdist_wheel
      #     twine upload dist/* --username __token__ --password ${{ secrets.PYPI_TOKEN }}


      # --- Go ---
      - name: Setup Go
        if: ${{ inputs.language == 'go' }}
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - name: Cache Go modules
        if: ${{ inputs.language == 'go' }}
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('${{ inputs.build_context }}/go.sum') }}

      - name: Run Go tests
        if: ${{ inputs.language == 'go' }}
        run: |
          cd ${{ inputs.build_context }}
          go test ./... -v -coverprofile=coverage.out
          mkdir -p ../artifacts/${{ inputs.service_name }}
          cp coverage.out ../artifacts/${{ inputs.service_name }}

      - name: Build Go binary
        if: ${{ inputs.language == 'go' }}
        run: |
          cd ${{ inputs.build_context }}
          go mod tidy
          go build -o app .
          mkdir -p ../artifacts/${{ inputs.service_name }}
          cp app ../artifacts/${{ inputs.service_name }}/

       # Build and push Docker image
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.build_context }}
          file: ./${{ inputs.dockerfile_path }}
          push: true
          tags: |
            ghcr.io/${{ secrets.REGISTRY_USERNAME }}/${{ inputs.service_name }}:latest
            ghcr.io/${{ secrets.REGISTRY_USERNAME }}/${{ inputs.service_name }}:${{ inputs.tag }}