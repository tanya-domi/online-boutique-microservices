name: Reusable CI Workflow

on:
  workflow_call:
    inputs:
      service_name:
        required: true
        type: string
      dockerfile_path:
        required: true
        type: string
      build_context:
        required: true
        type: string
      image_name:
        required: true
        type: string
      language:
        required: true
        type: string
    secrets:
      REGISTRY_USERNAME:
        required: true
      REGISTRY_PASSWORD:
        required: true
      SONAR_HOST_URL:
        required: true
      SONAR_TOKEN:
        required: true

jobs:
  build-test-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      #Setup language, cache dependencies, and run tests
  
      # --- Go ---
      - name: Setup Go
        if: ${{ inputs.language == 'go' }}
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - name: Cache Go modules
        if: ${{ inputs.language == 'go' }}
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('${{ inputs.build_context }}/go.sum') }}
      - name: Run Go tests
        if: ${{ inputs.language == 'go' }}
        run: |
          cd ${{ inputs.build_context }}
          go test ./... -v -coverprofile=coverage.out
          mkdir -p ../artifacts/${{ inputs.service_name }}
          cp coverage.out ../artifacts/${{ inputs.service_name }}

      - name: Publish to GitHub Packages
        if: ${{ inputs.language == 'go' }}
        run: |
          cd ${{ inputs.build_context }}
          go build -o mypackage ./...
          echo "Publishing package..."
          go list -m ./... | xargs -I {} go get {}
          go publish --token ${{ secrets.GITHUB_TOKEN }} --path .

      # --- .NET ---
      - name: Setup .NET
        if: ${{ inputs.language == 'dotnet' }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Cache NuGet packages
        if: ${{ inputs.language == 'dotnet' }}
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('${{ inputs.build_context }}/**/*.csproj') }}

      - name: Restore and Run .NET tests
        if: ${{ inputs.language == 'dotnet' }}
        run: |
          cd ${{ inputs.build_context }}
          dotnet restore
          dotnet test --no-build --collect:"XPlat Code Coverage"
          mkdir -p ../artifacts/${{ inputs.service_name }}
          cp -r TestResults ../artifacts/${{ inputs.service_name }}/ || true

      - name: Push to GitHub Packages
        if: ${{ inputs.language == 'dotnet' }}
        run: |
          dotnet nuget push MyPackage.nupkg \
            --api-key ${{ secrets.GITHUB_TOKEN }} \
            --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"

      # --- Node.js ---
      - name: Setup Node.js and .npmrc
        if: ${{ inputs.language == 'node' }}
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://npm.pkg.github.com/'
          scope: '@octocat'

      - name: Cache npm
        if: ${{ inputs.language == 'node' }}
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('${{ inputs.build_context }}/package-lock.json') }}
      
      - name: Install Dependencies
        if: ${{ inputs.language == 'node' }}
        run: npm ci

      - name: Run Node.js tests
        if: ${{ inputs.language == 'node' }}
        run: |
          cd ${{ inputs.build_context }}
          npm ci
          npm test -- --coverage || echo "No tests found"
          mkdir -p ../artifacts/${{ inputs.service_name }}
          cp -r coverage ../artifacts/${{ inputs.service_name }}/ || true

      - name: Publish to GitHub Packages
        if: ${{ inputs.language == 'node' }}
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # --- Python ---
      - name: Setup Python
        if: ${{ inputs.language == 'python' }}
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Cache pip
        if: ${{ inputs.language == 'python' }}
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('${{ inputs.build_context }}/requirements.txt') }}
      - name: Run Python tests
        if: ${{ inputs.language == 'python' }}
        run: |
          cd ${{ inputs.build_context }}
          pip install -r requirements.txt || true
          pytest --cov=. || echo "No tests found"
          mkdir -p ../artifacts/${{ inputs.service_name }}
          cp -r .coverage ../artifacts/${{ inputs.service_name }}/ || true

      - name: Publish to PyPI
        if: ${{ inputs.language == 'python' }}
        run: |
          cd ${{ inputs.build_context }}
          python setup.py sdist bdist_wheel
          twine upload dist/* --username __token__ --password ${{ secrets.PYPI_TOKEN }}

      # --- Java (Gradle) ---
      - name: Setup Java
        if: ${{ inputs.language == 'java' }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Cache Gradle
        if: ${{ inputs.language == 'java' }}
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('${{ inputs.build_context }}/gradle-wrapper.properties') }}

      - name: Run Gradle tests
        if: ${{ inputs.language == 'java' }}
        run: |
          cd ${{ inputs.build_context }}
          ./gradlew test
          mkdir -p ../artifacts/${{ inputs.service_name }}
          cp -r build/test-results ../artifacts/${{ inputs.service_name }}/ || true

      - name: Publish to GitHub Packages
        if: ${{ inputs.language == 'java' }}
        run: |
          cd ${{ inputs.build_context }}
          ./gradlew publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      # SonarQube analysis
      
      #   - name: SonarQube Scan
      #     uses: SonarSource/sonarqube-scan-action@v3
      #     with:
      #       projectBaseDir: ${{ inputs.build_context }}
      #       args: >
      #         -Dsonar.projectKey=${{ inputs.service_name }}
      #         -Dsonar.projectName=${{ inputs.service_name }}
      #         -Dsonar.sources=.
      #         -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
      #         -Dsonar.login=${{ secrets.SONAR_TOKEN }}
      #     env:
      #       SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      #       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # Upload artifacts
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.service_name }}-artifacts
          path: artifacts/${{ inputs.service_name }}
          retention-days: 7
      
      # Build & push Docker image
     
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.build_context }}
          file: ${{ inputs.dockerfile_path }}
          push: true
          tags: ${{ inputs.image_name }}:latest

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push
        run: |
          IMAGE_NAME=${{ inputs.image_name }}
          TAG=${{ inputs.tag }}
          docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:$TAG ${{ inputs.build_context }} -f ${{ inputs.dockerfile_path }}
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:$TAG